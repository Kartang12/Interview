
Фильтры

IAuthorizationFilter
	Запускается первым из всех. Проверяет, есть ли у юзера все права для доступа к методу. (проверяет авторизацию)

IResourceFilter
	wЗапускается вторым.
	Методы
	OnResourceExecuting - код в нем запустится после AuthorizationFilter, но до других фильтров.
	OnResourceExecuted - выполнится последним, после выполнения всего пайплайна приложения. 

IActionFilter
	OnActionExecuting - вызвется во время выполнения Action-а
	OnActionExecuted - после выполнения

IPageFilter

IExceptionFilter
	Фильтрует ошибки до того, как они заносятся в тело ответа.
	Может отловить все ошибки кроме авторизационных.

IResultFilter
	Запускается сразу до и после Action метода.
	Сам фильтр запускается только если Action метод выполнен успешно

Глобальные фильтры выполняются первыми (заданные в Startup), 
затем фильтры контроллера,
затем фильтры Action-а 


Для смены очередности фильтров, необходимо в фильтре реализовать интерфейс IOrderedFilter
В нем public int Order => <номер>


Свой фильтр

public class SimpleResourceFilter : Attribute, IResourceFilter
{
    public void OnResourceExecuting(ResourceExecutingContext context)
    {
	var a = context.ActionArguments["name"];
	if (a == "test")
		<do something>
	context.HttpContext.Response.Cookies.Append("LastVisit", DateTime.Now.ToString("dd/MM/yyyy hh-mm-ss"));
    }

    public void OnResourceExecuted(ResourceExecutedContext context)
    {
        // реализация отсутствует
    }
}


Глобальные фильтры
public void ConfigureServices(IServiceCollection services)
{
    // глобально - все сервисы MVC - и контроллеры, и Razor Page
    services.AddMvc(options =>
    {
        options.Filters.Add(typeof(SimpleResourceFilter)); // подключение по типу
         
        // альтернативный вариант подключения
        //options.Filters.Add(new SimpleResourceFilter()); // подключение по объекту
    });
}



Установка отдельно для контроллеров:
public void ConfigureServices(IServiceCollection services)
{
    services.AddControllersWithViews(options=>
    { 
        options.Filters.Add(new SimpleResourceFilter());    // подключение по объекту
        options.Filters.Add(typeof(SimpleResourceFilter));  // подключение по типу
    });
}




Чтобы прервать пайплайн фильтров, надо присвоить значение Result
public void OnResourceExecuting(ResourceExecutingContext context)
{
    context.Result = new ContentResult { Content = "Ресурс не найден" };
}


Фильтр vs Мидлвеер

Middleware operate on the level of ASP.NET Core and can act on every single request that comes in to the application.

MVC filters on the other hand only run for requests that come to MVC.




Отличия MVC от ASP .NET

The HttpRequestMessage exists only inside the "hosting" environment, web browser client does not know anything about that.

In the "hosting" world, IIS app pool is running the code you have built and deployed which knows very well wich framewok you are using as your code also contains the using assemblies you listed, System.Web... or System.Net...

Consider that even if you have shown separation between hosting, Controller and Action, all of that is running in same App Pool in IIS which, again, runs your code so knows what it is about as your IL assemblies were built from your specific source code.