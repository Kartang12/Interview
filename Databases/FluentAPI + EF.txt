FluentAPI + EF

public class ApplicationContext : DbContext
{
	public ApplicationContext()
	{
	    Database.EnsureDeleted();   // удаляем бд со старой схемой
	    Database.EnsureCreated();   // создаем бд с новой схемой
	}
}



_____________________________TABLES
[Table("People")]
public class User

||

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<User>().ToTable("People");
}




_____________________________COLUMNS

public class User
{
    [Column("user_id")]
    public int Id { get; set; }
}

||

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
	modelBuilder.Entity<User>().Property(u=>u.Id).HasColumnName("user_id");
}




_____________________________PRIMARY KEY

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<User>().HasKey(u => u.Id).HasName("UsersPrimaryKey");
}

[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
public int Id { get; set; }





_____________________________ ALTERNATE KEY = <SQL> UNIQUE
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<User>().HasAlternateKey(u => u.Passport);
}


	


_____________________________ INDEX
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<User>()
        .HasIndex(u => u.PhoneNumber)
        .HasDatabaseName("PhoneIndex");
        //.HasFilter("[PhoneNumber] IS NOT NULL");
}
или

[Index("PhoneNumber", IsUnique =true, Name ="Phone_Index")]
public class User
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Passport { get; set; }
    public string PhoneNumber { get; set; }
}


There can be only one clustered index per table. 
However, you can create multiple non-clustered indexes on a single table.

Clustered indexes only sort tables and they do not consume extra storage. 
Non-clustered indexes are stored in a separate place from the actual table claiming more storage space.

Clustered indexes are faster than non-clustered indexes since they don’t involve any extra lookup step.







_____________________________ DEFAULT VALUES
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<User>()
        .Property(u => u.CreatedAt)
        .HasDefaultValueSql("GETDATE()");
}

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<User>()
            .Property(u => u.Name)
            .HasComputedColumnSql("[FirstName] + ' ' + [LastName]");
}





_____________________________ FOREIGN KEYS
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<User>()
        .HasOne(p => p.Company)
        .WithMany(t => t.Users)
        .HasForeignKey(p => p.CompanyName)
        .HasPrincipalKey(t=>t.Name);






_____________________________ CASCADE DELETE
public class User
{
    public int Id { get; set; }
    public string Name { get; set; }
 
    public int? CompanyId { get; set; } // внешний ключ               <-------
    public Company Company { get; set; }    // навигационное свойство
}


protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<User>()
        .HasOne(p => p.Company)
        .WithMany(t => t.Users)
        .OnDelete(DeleteBehavior.Cascade);		//<----------------
}
// Cascade: зависимая сущность удаляется вместе с главной
// SetNull: свойство-внешний ключ в зависимой сущности получает значение null
// Restrict: зависимая сущность никак не изменяется при удалении главной сущности





_____________________________ СЛОЖНЫЕ СТРУКТУРЫ
var users = db.Users
    .Include(u => u.Company)  // добавляем данные по компаниям
        .ThenInclude(comp => comp.Country)      // к компании добавляем страну 
            .ThenInclude(count => count.Capital)    // к стране добавляем столицу
    .Include(u => u.Position) // добавляем данные по должностям
    .ToList();





_____________________________ OWNED
public class User
{
    public int Id { get; set; }
    public string Login { get; set; }
    public string Password { get; set; }
    public UserProfile Profile { get; set; }
}
[Owned]
public class UserProfile
{
    public string Name { get; set; }
    public int Age { get; set; }
}

//будет таблица
CREATE TABLE [dbo].[Users] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Login]        NVARCHAR (MAX) NULL,
    [Password]     NVARCHAR (MAX) NULL,
    [Profile_Name] NVARCHAR (MAX) NULL,						<===========
    [Profile_Age]  INT            NULL,						<===========
    CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED ([Id] ASC)
);


//FluentAPI
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<User>().OwnsOne(u => u.Profile);
}





_____________________________ JOIN
var users = db.Users.Join(db.Companies, // второй набор
    u => u.CompanyId, // свойство-селектор объекта из первого набора
    c => c.Id, // свойство-селектор объекта из второго набора
    (u, c) => new // результат
    {
        Name=u.Name, 
        Company = c.Name, 
        Age=u.Age
    });



SQL в EF

var comps = db.Companies.FromSqlRaw("SELECT * FROM Companies").ToList();
foreach (var company in comps)
    Console.WriteLine(company.Name);


Интерполяция
var name = "%Tom%";
var age = 30;
var users = db.Users.FromSqlInterpolated($"SELECT * FROM Users WHERE Name LIKE {name} AND Age > {age}").ToList();


Удаление/вставка/апдейт

string newComp = "Apple";
int numberOfRowInserted = db.Database.ExecuteSqlRaw("INSERT INTO Companies (Name) VALUES ({0})", newComp);



EntityState.Modified
Если объект получен в другом контексте
using (PhoneContext db = new PhoneContext())
{
    if(p1!=null)
    {
        p1.Price = 60000;
        db.Entry(p1).State = EntityState.Modified;
        db.SaveChanges();
    }
}

using (PhoneContext db = new PhoneContext())
{
    if(p1!=null)
    {
        db.Entry(p1).State = EntityState.Deleted;
        db.SaveChanges();
    }
}






Stored procedures

public class ApplicationContext : DbContext
{
    public DbSet<Company> Companies { get; set; }
    public DbSet<User> Users { get; set; }
    public IQueryable<User> GetUsersByAge(int age)  => FromExpression(() => GetUsersByAge(age));         <----------
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(@"Server=(localdb)\mssqllocaldb;Database=helloappdb;Trusted_Connection=True;");
    }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasDbFunction(() => GetUsersByAge(default));										<------------
    }
}





Отложенная загрузка (lazy loading) заключается в том, что Entity Framework автоматически загружает данные, 
при этом не загружая связанные данные. Когда потребуются связанные данные, необходимо создасть еще один запрос к базе данных. 

DbContext.Configuration.LazyLoadingEnabled  - по умолчанию

public static void LazyLoading()
{
    SampleContext context = new SampleContext();

    context.Database.Log = (s => System.Diagnostics.Debug.WriteLine(s));

    // Загрузить всех покупателей
    List<Customer> customers = context.Customers 				<--------------
         .ToList();      // +1 запрос к базе

    // Загрузить все их заказы
    List<Order> orders = customers.SelectMany(c => c.Orders)	<--------------
         .ToList();      // +3 запроса к базе данных
}

Прямая загрузка данных (eager loading) позволяет указать в запросе какие связанные данные нужно загрузить при выполнении запроса. 
Благодаря этому, когда в коде вы будете ссылаться на связанную таблицу через навигационное свойство, SQL-запрос не будет направляться 
в базу данных, т.к. связанные данные уже будут загружены при первом запросе. 
В Entity Framework для этих целей используется метод Include(), в котором можно указать навигационное свойство

public static void EagerLoading()
{
    SampleContext context = new SampleContext();

    context.Database.Log = (s => System.Diagnostics.Debug.WriteLine(s));

    // Загрузить всех покупателей и связанные с ними заказы
    List<Customer> customers = context.Customers
        .Include(c => c.Orders)
        .ToList();      // +1 запрос к базе

    // Получить все их заказы
    List<Order> orders = customers.SelectMany(c => c.Orders)
        // Запрос к базе данных не выполняется,
        // т.к. данные уже были извлечены 
        // ранее с помощью прямой загрузки
        .ToList();
}


явная загрузка (explicit loading) данных, не приводит к загрузке всех связанных данных в первом запросе и не приводит к автоматическому 
извлечению связанных данных, вы должны явно вызвать метод Load(), если хотите загрузить связанные данные. Использовать если отключена Lazy Loading и неизвестно, будут ли использоваться связанные данные.


virtual needed only if you want lazy loading support