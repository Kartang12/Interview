ASP NET

Ковейер и middleware

Компоненты конвейера, которые отвечают за обработку запроса, называются middleware. 
Для подключения компонентов middleware используется метод Configure из класса Startup. 
Компоненты middleware конфигурируются с помощью методов расширений Run, Map и Use объекта IApplicationBuilder, который передается в метод Configure() класса Startup



Жизненный цикл зависимостей
Transient: при каждом обращении к сервису создается новый объект сервиса. В течение одного запроса может быть несколько обращений к сервису, соответственно при каждом обращении будет создаваться новый объект. Подобная модель жизненного цикла наиболее подходит для легковесных сервисов, которые не хранят данных о состоянии

Scoped: для каждого запроса (скоупа) создается свой объект сервиса. То есть если в течение одного запроса есть несколько обращений к одному сервису, то при всех этих обращениях будет использоваться один и тот же объект сервиса.

Singleton: объект сервиса создается при первом обращении к нему, все последующие запросы используют один и тот же ранее созданный объект сервиса





Свой middleware
Класс middleware должен иметь конструктор, который принимает параметр типа RequestDelegate. Через этот параметр можно получить ссылку на тот делегат запроса, который стоит следующим в конвейере обработки запроса.

Также в классе должен быть определен метод, который должен называться либо Invoke, либо InvokeAsync. Причем этот метод должен возвращать объект Task и принимать в качестве параметра контекст запроса - объект HttpContext. Данный метод собственно и будет обрабатывать запрос.

public class TokenMiddleware
{
    private readonly RequestDelegate _next;
 
    public TokenMiddleware(RequestDelegate next)
    {
        this._next = next;
    }
 
    public async Task InvokeAsync(HttpContext context)
    {
        var token = context.Request.Query["token"];
        if (token!="12345678")
        {
            context.Response.StatusCode = 403;
            await context.Response.WriteAsync("Token is invalid");
        }
        else
        {
            await _next.Invoke(context);			<---------- Вызов следующего мидлвеера
        }
    }
}



public class Startup
{
    public void Configure(IApplicationBuilder app)
    {
        app.UseMiddleware<TokenMiddleware>();		<------------- добавление в пайплайн
 
        app.Run(async (context) =>
        {
            await context.Response.WriteAsync("Hello World");
        });
    }
}




Сервисы MVC

AddMvc(): добавляет все сервисы фреймворка MVC (в том числе сервисы для работы с аутентификацией и авторизацией, валидацией и т.д.)

AddMvcCore(): добавляет только основные сервисы фреймворка MVC, 
а всю допалнительную функциональность, типа аутентификацией и авторизацией, валидацией и т.д., необходимо добавлять самостоятельно

AddControllersWithViews(): позволяет использовать контроллеры и представления и связанную функциональность.
При создании проекта по типу Web Application (Model-View-Controller) используется именно этот метод

AddControllers(): позволяет использовать контроллеры, но без представлений.





Свой обработчик маршрутов

app.UseMvc(routes =>
    {
        routes.MapRoute("api/get", async context =>
        {
            await context.Response.WriteAsync("для обработки использован маршрут api/get");
        });

        routes.MapRoute(
            name: "default",
            template: "{controller=Home}/{action=Index}/{id?}");
    });





Атрибуты NonController, ActionName и NonAction
Eсть класс в папке Controllers, но мы не хотим, чтобы он мог обрабатывать запрос и использоваться как контроллер. 
Чтобы указать, что этот класс не является контроллером, нам надо использовать над ним атрибут [NonController]:

[NonController]
public class HomeController : Controller
{
    //...........
}

Аналогично, если мы хотим, чтобы какой-либо публичный метод контроллера не рассматривался как действие, то мы можем использовать над ним атрибут NonAction:
[NonAction]
public string Hello()
{
    return "Hello ASP.NET";
}
Атрибут [ActionName] позволяет для метода задать другое имя действия. Например:

[ActionName("Welcome")]
public string Hello()
{
    return "Hello ASP.NET";
}
В этом случае чтобы обратиться к этому методу, надо отправить запрос 
localhost:xxxx/Home/Welcome. А запрос localhost:xxxx/Home/Hello работать не будет.






IActionResult

Объекты типа IActionResult непосредственно предназначены для генерации результата действия. 
Интерфейс IActionResult находится в пространстве имен Microsoft.AspNetCore.Mvc и определяет один метод:

public interface IActionResult
{
    Task ExecuteResultAsync(ActionContext context);
}

Свой ActionResult
public class HtmlResult : IActionResult
{
    string htmlCode;
    public HtmlResult(string html)
    {
        htmlCode = html;
    }
    public async Task ExecuteResultAsync(ActionContext context)
    {
        string fullHtmlCode = "<!DOCTYPE html><html><head>";
        fullHtmlCode += "<title>Главная страница</title>";
        fullHtmlCode += "<meta charset=utf-8 />";
        fullHtmlCode += "</head> <body>";
        fullHtmlCode += htmlCode;
        fullHtmlCode += "</body></html>";
        await context.HttpContext.Response.WriteAsync(fullHtmlCode);
    }
}





Добавление контекста базы данных
public void ConfigureServices(IServiceCollection services)
{
    // получаем строку подключения из файла конфигурации
    string connection = Configuration.GetConnectionString("DefaultConnection");
    // добавляем контекст MobileContext в качестве сервиса в приложение
    services.AddDbContext<ApplicationContext>(options =>
        options.UseSqlServer(connection));
    services.AddControllersWithViews();
}




